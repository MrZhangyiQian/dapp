const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("MyERC777 合约测试", function () {
  let MyToken;
  let myToken;
  let owner;
  let addr1;

  beforeEach(async function () {
    [owner, addr1] = await ethers.getSigners();

    // 首先部署 ERC1820Registry (ERC777 依赖)
    const ERC1820Registry = await ethers.getContractAt(
      "IERC1820Registry",
      "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24"
    );
    
    // 如果 ERC1820Registry 尚未部署，则部署它
    try {
      await ERC1820Registry.getAddress();
    } catch (error) {
      // 在 Hardhat 网络中部署 ERC1820Registry
      await ethers.provider.send("hardhat_setCode", [
        "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "0x608060405260043610610077576000357c010000000000000000000000000000000000000000000000000000000090048063a4ba554d1461007c578063b69d834d146100a7578063c6c1e0e0146100d2578063e985e9c5146100fd575b600080fd5b34801561008857600080fd5b5061009161012c565b60405161009e91906105b2565b60405180910390f35b3480156100b357600080fd5b506100cc60048036038101906100c7919061054c565b610132565b6040516100d991906105d4565b60405180910390f35b3480156100de57600080fd5b506100f760048036038101906100f2919061054c565b610260565b60405161010491906105d4565b60405180910390f35b34801561011957600080fd5b5061012a6004803603810190610125919061057c565b6102a8565b005b60015481565b60008060008060008060008060008060008060008060008060009450600093505b600085141561019c57600185955060018695506000945060009650610132565b60009250600091505b60008314156101d057600183925060018492506000915060009350610132565b60009150600090505b600082141561020557600182915060018391506000905060009250610132565b6000905060008160001916141561021f5760009550610225565b8094505b5050505090565b600060015460028054905003905090565b60008060008060008060008060008060008060008060008060009450600093505b60008514156102a257600185955060018695506000945060009650610260565b60009250600091505b60008314156102d657600183925060018492506000915060009350610260565b60009150600090505b600082141561030b57600182915060018391506000905060009250610260565b60009050600081600019161415610325576000955061032b565b8094505b5050505090565b8060018190555060008060008060008060008060008060008060008060008060009450600093505b60008514156103b2576001859550600186955060009450600096506102a8565b60009250600091505b60008314156103e6576001839250600184925060009150600093506102a8565b60009150600090505b600082141561041b576001829150600183915060009050600092506102a8565b60009050600081600019161415610435576000955061043b565b8094505b5050505090565b60008135905061044f8161063b565b92915050565b60008135905061046481610652565b92915050565b60008135905061047981610669565b92915050565b60008135905061048e81610680565b92915050565b6000813590506104a381610697565b92915050565b6000813590506104b8816106ae565b92915050565b600082601f8301126104ce57600080fd5b81356104df8482602086016105f5565b91505092915050565b6000602082840312156104f757600080fd5b600082013567ffffffffffffffff81111561050e57600080fd5b61051a848285016104bd565b91505092915050565b600080600080600060a0868803121561053857600080fd5b600061054688828901610440565b955050602061055788828901610440565b94505060406105688882890161049f565b93505060606105798882890161049f565b925050509295509295909350565b60008060006060848603121561059957600080fd5b60006105a786828701610440565b93505060206105b886828701610440565b92505060406105ca8682870161049f565b9150509250925092565b600060208201905081810360008301526105eb81846105da565b905092915050565b6000602082019050818103600083015261060a81846105da565b905092915050565b600081519050919050565b600082825260208201905092915050565b600061063a8261061c565b91506106468382610625565b9150819050919050565b61064981610625565b811461065457600080fd5b50565b61066081610625565b811461066b57600080fd5b50565b61067781610625565b811461068257600080fd5b50565b61068e81610625565b811461069957600080fd5b50565b6106a581610625565b81146106b057600080fd5b5056fea2646970667358221220f69a0948c0ace365451901102567a0c8c6957be004751f95505f8549b806118d64736f6c634300080c0033"
      ]);
    }

    // 部署 MyERC777 (不处理 ERC1820)
    MyToken = await ethers.getContractFactory("MyToken");
    myToken = await MyToken.deploy(
      "MyToken",       // 代币名称
      "MTK",           // 代币符号
      []               // 默认操作员列表
    );
  });

  it("应正确初始化代币名称和符号", async function () {
    expect(await myToken.name()).to.equal("MyToken");
    expect(await myToken.symbol()).to.equal("MTK");
  });
});