{
  "stats": {
    "suites": 6,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-11T09:58:08.544Z",
    "end": "2025-07-11T09:58:10.971Z",
    "duration": 2427,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a3cd66df-38af-47ad-aae6-9ac64c0685f1",
      "title": "",
      "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
      "file": "\\test\\Auction.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1e3f881c-9510-43a7-b5a8-6710505b73d2",
          "title": "Auction Contract",
          "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
          "file": "\\test\\Auction.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auction Contract\"",
              "fullTitle": "Auction Contract \"before each\" hook in \"Auction Contract\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "[deployer, bidder1, bidder2] = await ethers.getSigners();\n// 部署 NFT\nconst MyNFT = await ethers.getContractFactory(\"MyNFT\");\nnft = await MyNFT.deploy();\nawait nft.waitForDeployment();\n// 铸造 NFT 给部署者\nconst mintTx = await nft.mint(deployer.address);\nawait mintTx.wait();\n// 部署 Mock Chainlink Aggregator\nconst MockV3Aggregator = await ethers.getContractFactory(\"MockV3Aggregator\");\nmockPriceFeed = await MockV3Aggregator.deploy(8, 2000e8); // $2000 per ETH\nawait mockPriceFeed.waitForDeployment();\n// 获取 Auction 合约工厂\nconst Auction = await ethers.getContractFactory(\"Auction\");\n// 使用 Hardhat Upgrades 插件部署代理合约，并注入 Mock 预言机\nauctionProxy = await upgrades.deployProxy(Auction, [\n    deployer.address,\n    nft.target,\n    tokenId,\n    duration,\n    mockPriceFeed.target, // 使用 mock 替代真实预言机\n], { initializer: \"initialize\" });\nawait auctionProxy.waitForDeployment();\n// 获取代理合约地址并授权\nconst auctionAddress = await auctionProxy.getAddress();\n// 授权 NFT 给拍卖合约地址\nconst proxyApproveTx = await nft.connect(deployer).approve(auctionAddress, tokenId);\nawait proxyApproveTx.wait();\n// 将 NFT 转移到拍卖合约\nawait nft.connect(deployer)[\"safeTransferFrom(address,address,uint256)\"](deployer.address, auctionAddress, tokenId);",
              "err": {},
              "uuid": "8c690e26-9c6d-449b-9aee-ed67e2deeff7",
              "parentUUID": "1e3f881c-9510-43a7-b5a8-6710505b73d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35f7deaa-9ad2-4de2-9ad5-1375c99e367f",
              "title": "Initialization",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should initialize auction correctly",
                  "fullTitle": "Auction Contract Initialization should initialize auction correctly",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const auctionInfo = await auctionProxy.auction();\nexpect(auctionInfo.seller).to.equal(deployer.address);\nexpect(auctionInfo.nftContract).to.equal(nft.target);\nexpect(auctionInfo.tokenId).to.equal(tokenId);\nexpect(await nft.ownerOf(tokenId)).to.equal(await auctionProxy.getAddress());",
                  "err": {},
                  "uuid": "21ada495-3d08-4375-bf11-f864b1cb01cc",
                  "parentUUID": "35f7deaa-9ad2-4de2-9ad5-1375c99e367f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21ada495-3d08-4375-bf11-f864b1cb01cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "2b2d8c2d-de02-4cd0-9541-9dab7d8a6ded",
              "title": "Bidding Logic",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow a bid and update highest bidder",
                  "fullTitle": "Auction Contract Bidding Logic should allow a bid and update highest bidder",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\nconst auctionInfo = await auctionProxy.auction();\nexpect(auctionInfo.highestBidder).to.equal(bidder1.address);\nexpect(auctionInfo.highestBid).to.equal(bidAmount);",
                  "err": {},
                  "uuid": "2e024301-600c-456f-be55-0e32bfc3fa13",
                  "parentUUID": "2b2d8c2d-de02-4cd0-9541-9dab7d8a6ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if seller tries to bid",
                  "fullTitle": "Auction Contract Bidding Logic should revert if seller tries to bid",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait expect(\n    auctionProxy.connect(deployer).placeBid({ value: bidAmount })\n).to.be.revertedWith(\"Seller cannot bid\");",
                  "err": {},
                  "uuid": "3b1b3853-756a-402b-975b-6b17938bd4d6",
                  "parentUUID": "2b2d8c2d-de02-4cd0-9541-9dab7d8a6ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if bid is not higher than current",
                  "fullTitle": "Auction Contract Bidding Logic should revert if bid is not higher than current",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.05\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\nawait expect(\n    auctionProxy.connect(bidder2).placeBid({ value: bidAmount })\n).to.be.revertedWith(\"Bid too low\");",
                  "err": {},
                  "uuid": "48fc97b4-c0ab-4e6f-8f97-dbc8552996f4",
                  "parentUUID": "2b2d8c2d-de02-4cd0-9541-9dab7d8a6ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if auction has ended",
                  "fullTitle": "Auction Contract Bidding Logic should revert if auction has ended",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 快进时间到拍卖结束后\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait expect(\n    auctionProxy.connect(bidder1).placeBid({ value: ethers.parseEther(\"0.1\") })\n).to.be.revertedWith(\"Auction ended\");",
                  "err": {},
                  "uuid": "e3d03685-fdbd-430f-9a10-599e1d4aeab4",
                  "parentUUID": "2b2d8c2d-de02-4cd0-9541-9dab7d8a6ded",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e024301-600c-456f-be55-0e32bfc3fa13",
                "3b1b3853-756a-402b-975b-6b17938bd4d6",
                "48fc97b4-c0ab-4e6f-8f97-dbc8552996f4",
                "e3d03685-fdbd-430f-9a10-599e1d4aeab4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "c64220d9-7e26-4864-87ef-a96cc3ba8bba",
              "title": "Ending Auction",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should end auction and transfer NFT to winner",
                  "fullTitle": "Auction Contract Ending Auction should end auction and transfer NFT to winner",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const bidAmount = ethers.parseEther(\"0.1\");\nawait auctionProxy.connect(bidder1).placeBid({ value: bidAmount });\n// 快进时间\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait auctionProxy.endAuction();\nconst owner = await nft.ownerOf(tokenId);\nexpect(owner).to.equal(bidder1.address);",
                  "err": {},
                  "uuid": "bbc22347-ee13-47ae-b7cf-eca5c1cb71d8",
                  "parentUUID": "c64220d9-7e26-4864-87ef-a96cc3ba8bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return NFT if no bids",
                  "fullTitle": "Auction Contract Ending Auction should return NFT if no bids",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 不出价直接结束\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait auctionProxy.endAuction();\nconst owner = await nft.ownerOf(tokenId);\nexpect(owner).to.equal(deployer.address);",
                  "err": {},
                  "uuid": "ec25d2af-a417-4c3a-95f7-02e4c3451889",
                  "parentUUID": "c64220d9-7e26-4864-87ef-a96cc3ba8bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if called before auction ends",
                  "fullTitle": "Auction Contract Ending Auction should revert if called before auction ends",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n    auctionProxy.endAuction()\n).to.be.revertedWith(\"Auction not ended\");",
                  "err": {},
                  "uuid": "6e125976-b2d9-4b74-a0b4-e946596698c9",
                  "parentUUID": "c64220d9-7e26-4864-87ef-a96cc3ba8bba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert if called by unauthorized user",
                  "fullTitle": "Auction Contract Ending Auction should revert if called by unauthorized user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 快进时间\nawait network.provider.send(\"evm_increaseTime\", [duration + 1]);\nawait network.provider.send(\"evm_mine\");\nawait expect(\n    auctionProxy.connect(bidder1).endAuction()\n).to.be.revertedWith(\"Not authorized\");",
                  "err": {},
                  "uuid": "9754d28e-269c-4938-99fb-57772f8ff47d",
                  "parentUUID": "c64220d9-7e26-4864-87ef-a96cc3ba8bba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbc22347-ee13-47ae-b7cf-eca5c1cb71d8",
                "ec25d2af-a417-4c3a-95f7-02e4c3451889",
                "6e125976-b2d9-4b74-a0b4-e946596698c9",
                "9754d28e-269c-4938-99fb-57772f8ff47d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "5fae8bd4-5c03-4802-894e-6466b8b88dec",
              "title": "Price Calculation",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get correct ETH/USD price",
                  "fullTitle": "Auction Contract Price Calculation should get correct ETH/USD price",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const price = await auctionProxy.getEthUsdPrice();\nexpect(price).to.be.gt(0);",
                  "err": {},
                  "uuid": "9c996daf-aa10-41d1-acdd-f9495879e957",
                  "parentUUID": "5fae8bd4-5c03-4802-894e-6466b8b88dec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should calculate USD value of ETH correctly",
                  "fullTitle": "Auction Contract Price Calculation should calculate USD value of ETH correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ethAmount = ethers.parseEther(\"0.5\"); // BigInt\nconst ethPrice = await auctionProxy.getEthUsdPrice(); // assume this is also a BigInt\n\n           // 使用 ethers.utils.formatUnits 转换后再做乘法\n           const ethAmountInEth = Number(ethers.formatEther(ethAmount));\n           const ethPriceInUsd = Number(ethers.formatUnits(ethPrice, 8)); // 根据预言机精度调整 decimals\n           const expected = ethAmountInEth * ethPriceInUsd;",
                  "err": {},
                  "uuid": "0479bab3-24ea-414a-8645-f5e30fa3ad9f",
                  "parentUUID": "5fae8bd4-5c03-4802-894e-6466b8b88dec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c996daf-aa10-41d1-acdd-f9495879e957",
                "0479bab3-24ea-414a-8645-f5e30fa3ad9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "fbe5bb59-a22f-4b53-b81e-3352ece5e61d",
              "title": "UUPS Upgrade Support",
              "fullFile": "D:\\web3\\secondNft\\test\\Auction.test.js",
              "file": "\\test\\Auction.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should upgrade contract successfully",
                  "fullTitle": "Auction Contract UUPS Upgrade Support should upgrade contract successfully",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// 部署新版本\nconst AuctionV2 = await ethers.getContractFactory(\"AuctionV2\");\n// 升级代理\nconst upgradedProxy = await upgrades.upgradeProxy(await auctionProxy.getAddress(), AuctionV2);\nawait upgradedProxy.waitForDeployment();\n// 验证状态是否保留\nconst auctionInfo = await upgradedProxy.auction();\nexpect(auctionInfo.seller).to.equal(deployer.address);",
                  "err": {},
                  "uuid": "27502844-6d54-4b3f-b1f8-e530178a4c27",
                  "parentUUID": "fbe5bb59-a22f-4b53-b81e-3352ece5e61d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only allow owner to upgrade",
                  "fullTitle": "Auction Contract UUPS Upgrade Support should only allow owner to upgrade",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const [deployer, bidder1] = await ethers.getSigners();\n\n// 部署新版本合约\nconst AuctionV2 = await ethers.getContractFactory(\"AuctionV2\");\nconst auctionV2Impl = await AuctionV2.deploy();\nawait auctionV2Impl.waitForDeployment();\n\n// 获取代理合约实例\nconst proxyAddress = await auctionProxy.getAddress();\nconst proxy = await ethers.getContractAt(\"Auction\", proxyAddress);\n\nconsole.log(\"Proxy Owner:\", await proxy.owner());\nconsole.log(\"Bidder1:\", bidder1.address);\nconsole.log(\"AuctionV2 Implementation:\", auctionV2Impl.target);\n\n// 非owner尝试升级 - 应该被拒绝\nawait expect(\n    proxy.connect(bidder1).adminUpgradeTo(auctionV2Impl.target)\n).to.be.revertedWithCustomError(proxy, \"OwnableUnauthorizedAccount\")\n .withArgs(bidder1.address);\n\n// 验证合约未升级 终于\nconst currentImpl = await upgrades.erc1967.getImplementationAddress(proxyAddress);\nexpect(currentImpl).not.to.equal(auctionV2Impl.target);",
                  "err": {},
                  "uuid": "3c05e27c-1730-4c7c-8775-9e6bdb2efd20",
                  "parentUUID": "fbe5bb59-a22f-4b53-b81e-3352ece5e61d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27502844-6d54-4b3f-b1f8-e530178a4c27",
                "3c05e27c-1730-4c7c-8775-9e6bdb2efd20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "yyyy-mm-dd_HH-MM-ss"
      },
      "version": "6.2.0"
    }
  }
}